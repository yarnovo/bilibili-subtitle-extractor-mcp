name: Test, Build and Release Docker Image

# 触发条件
on:
  # 推送到 main 分支
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'  # 版本标签 (v1.0.0, v1.2.3, etc.)
  
  # Pull Request 到 main 分支
  pull_request:
    branches: [ main ]
  
  # 手动触发
  workflow_dispatch:

# 权限设置
permissions:
  contents: write  # 创建 release 需要写权限
  packages: write  # 发布包需要写权限

# 环境变量
env:
  DOCKER_IMAGE: yarnovo/bilibili-subtitle-extractor-mcp
  PLATFORMS: linux/amd64,linux/arm64

# 定义作业
jobs:
  # 测试作业 - 总是运行
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 设置 Node.js
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      # 安装依赖
      - name: Install dependencies
        run: npm ci
      
      # 构建项目
      - name: Build project
        run: npm run build

      # 运行测试
      - name: Run tests
        run: npm test

      # 验证构建输出
      - name: Verify build output
        run: |
          if [ ! -f "dist/main/index.js" ]; then
            echo "Build failed: dist/main/index.js not found"
            exit 1
          fi
          echo "✅ Build successful"

  # Docker构建作业
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 设置Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 构建测试镜像（不推送）
      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 发布Docker镜像作业 - 仅在版本标签时运行
  docker-publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    # 只有在 push 事件且标签匹配 v*.*.* 格式时才运行
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 设置Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 登录到Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # 提取版本信息
      - name: Extract version
        id: version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          echo "Tag version: $TAG_VERSION"
          echo "Package version: $PACKAGE_VERSION"
          
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Version mismatch: tag v$TAG_VERSION != package.json v$PACKAGE_VERSION"
            exit 1
          fi
          
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version tag matches package.json"
      
      # 构建并推送Docker镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=Bilibili Subtitle Extractor MCP
            org.opencontainers.image.description=MCP server for extracting subtitles from Bilibili videos
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
      
      # 创建 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### 🐋 Docker 镜像
            ```bash
            # 拉取最新版本
            docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # 直接运行
            docker run -d \
              --name bilibili-subtitle-extractor \
              -p 3456:3456 \
              -p 8080:8080 \
              --restart unless-stopped \
              ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
            ```
            
            ### 🔧 Docker Compose 配置
            ```yaml
            version: '3.8'
            services:
              bilibili-subtitle-extractor:
                image: ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
                container_name: bilibili-subtitle-extractor-mcp
                ports:
                  - "3456:3456"  # HTTP MCP接口端口
                  - "8080:8080"  # WebSocket端口
                restart: unless-stopped
            ```
            
            ### 📋 功能
            - 🎯 从Bilibili视频中提取字幕内容
            - ⚡ 基于WebSocket的浏览器插件通信
            - 🔗 支持生成带时间戳的视频跳转链接
            - 🔌 完全兼容MCP标准
            - 📊 实时状态监控
            
            ### 🔗 相关链接
            - 📦 Docker镜像: [Docker Hub](https://hub.docker.com/r/${{ env.DOCKER_IMAGE }})
            - 🔌 浏览器插件: [GitHub Releases](https://github.com/yarnovo/bilibili-subtitle-extractor-extension/releases)
            - 📖 完整文档: [README.md](./README.md)
            
            ---
            **⚠️ 注意**: 需要安装配套的浏览器插件才能正常使用
          draft: false
          prerelease: false

  # 状态检查作业
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test, docker-build, docker-publish]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          echo "✅ All tests passed"
      
      - name: Check docker build results
        run: |
          if [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo "❌ Docker build failed"
            exit 1
          fi
          echo "✅ Docker build successful"
      
      - name: Check publish results
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          if [ "${{ needs.docker-publish.result }}" != "success" ]; then
            echo "❌ Docker publish failed"
            exit 1
          fi
          echo "✅ Docker image published successfully" 